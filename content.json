{"meta":{"title":"Moonm3n's blog","subtitle":"","description":"","author":"Yueyang Zhan","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"tinykv-project2-RaftKV-PartB","slug":"tinykv-project2-RaftKV-PartB","date":"2022-02-03T09:56:59.000Z","updated":"2022-02-20T14:05:49.574Z","comments":true,"path":"2022/02/03/tinykv-project2-RaftKV-PartB/","link":"","permalink":"http://example.com/2022/02/03/tinykv-project2-RaftKV-PartB/","excerpt":"tinykv project 2 part b, 利用 Raft 模块构建容错的 KV 存储服务.","text":"tinykv project 2 part b, 利用 Raft 模块构建容错的 KV 存储服务. Store: 一个 tinykv-server Peer: tinykv-server 中运行的一个 raft node Region: Peer 的集合, 即一个 Raft group peer storageraft ready processHandleRaftReady get the ready from Raft module. persisting log entries. applying committed entries. sending Raft message to other peers. 问题记录panic: find no region for 30203030303030303030raft.go newRaft()优先使用 storage 中的 confState.Nodes 的值. panic: runtime error: index out of range [18446744073709551611] with length 1raft.go sendAppend()index 处理有问题 空指针snap 的 response 需要携带 Region, 否则会出现空指针异常.","categories":[{"name":"database project","slug":"database-project","permalink":"http://example.com/categories/database-project/"}],"tags":[{"name":"tinykv","slug":"tinykv","permalink":"http://example.com/tags/tinykv/"}]},{"title":"tinykv-project2-RaftKV-PartA","slug":"tinykv-project2-RaftKV-PartA","date":"2022-01-17T07:30:04.000Z","updated":"2022-02-10T07:57:54.760Z","comments":true,"path":"2022/01/17/tinykv-project2-RaftKV-PartA/","link":"","permalink":"http://example.com/2022/01/17/tinykv-project2-RaftKV-PartA/","excerpt":"tinykv project 2 part a, 实现基本的 Raft 算法.","text":"tinykv project 2 part a, 实现基本的 Raft 算法. 2aa leader electionleader election 流程 什么时候开始选举? follow 在超时时间内没有收到心跳, 认为 leader 已经失效, 转变为 candidate 开始选举. 选举超时时, 没有节点赢得选举, 所有 candidate 会随机等待一段时间, 然后重新选举. candidate 是怎样选举的? 成为 candidate 后首先自增 term. 为自己投票. 重制选举超时计时器. 发送请求投票的 RPC 给其他所有服务器. candidate 怎样结束选举? 接收到大多数节点的选票, 成为 leader 并立即向其他节点发送心跳. 发现了其他 leader, 且这个 leader 的 term 不小于自己的 term. 选举超时, candidate 会随机等待一段时间, 再次自增 term, 然后重新选举. follower 怎样投票? 每个 follower 只会对一个 term 投一次票. 申请选票的 candidate 必须包含所有已提交的日志. leader election 实现Raft 算法的 leader election 是在时钟超时时触发的, tinykv 的 Raft 算法采用逻辑时钟来进行计时, 首先需要确定在哪里处理超时, 开始 leader election.观察一下 Raft 结构体的成员, 逻辑时钟的值应该存放在 heartbeatElapsed 和 electionElapsed 这两个变量中. heartbeatElapsed 记录了上次心跳超时以来的 ticks 数, 只有 leader 会保持这个值, 超时时发送心跳. electionElapsed 对 leader 和 candidate 而言, 记录了上次选举超时以来的 ticks 数; 对 follower 而言, 记录了上次收到 leader 的有效消息以来的 ticks 数. 超时时启动选举. 比较合理的做法是在 tick() 方法中递增逻辑时钟并监测超时. tick() 方法中,如果当前节点是 leader, 则更新 heartbeatElapsed 和 electionElapsed 的值, 并且检查是否超时.如果超时, 则转换为 candidate 节点. 如果当前节点是 candidate, 则检查是否超时, 如果超时, 则重新选举. 如果当前节点是 follower, 则检查是否收到 leader 的有效消息, 如果收到, 则更新 electionElapsed 的值.如果没有收到 leader 的有效消息, 则重新选举. 如果当前节点是 candidate, 则检查是否收到 leader 的有效消息, 如果收到, 则转换为 follower 节点. newRaft() 需要处理的消息类型: MessageType_MsgHup 成为 candidate 并开始选举. MessageType_MsgBeat 只有 leader 会接受这个消息, 向所有 peer 广播心跳. MessageType_MsgRequestVote MessageType_MsgRequestVoteResponse 只有 candidate 会接受这个消息. 2ab log replicationlog replication 相关概念日志的几个 index: stabled: 已经被持久化的日志的最大 index. committed: 已经被提交的日志的最大 index. applied: 已经被应用的日志的最大 index. 日志先被 stabled, 再被 commit, 最后被 applied. snapshot/first…..applied….committed….stabled…..last log replication 流程 节点成为 leader 时将所有 peer 的 nextIndex 初始化为 lastIndex + 1, 所有 peer 的 matchIndex 初始化为 0. 接收到 client 请求, 将请求添加到自己的日志中. 发送 AppendEntries RPC 给所有 peer, 并等待所有 peer 的回复. log replication 实现日志的 index 从 1 开始, committed, applied, stabled 应该日志的 index 而不是切片的下标. 2ac raw node interfaceReady{}Ready 封装了可以读取、持久化、提交的状态. Entries: specifies entries to be saved to stable storage BEFORE messages are sent.CommittedEntries: specifies entries to be committed to a store/state-machine.These have previously been committed to stable store.Ready() Advanced()","categories":[{"name":"database project","slug":"database-project","permalink":"http://example.com/categories/database-project/"}],"tags":[{"name":"tinykv","slug":"tinykv","permalink":"http://example.com/tags/tinykv/"}]},{"title":"Raft-论文研读","slug":"Raft-论文研读","date":"2022-01-17T05:59:05.000Z","updated":"2022-01-17T16:00:51.764Z","comments":true,"path":"2022/01/17/Raft-论文研读/","link":"","permalink":"http://example.com/2022/01/17/Raft-%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/","excerpt":"","text":"","categories":[{"name":"paper","slug":"paper","permalink":"http://example.com/categories/paper/"}],"tags":[{"name":"Raft","slug":"Raft","permalink":"http://example.com/tags/Raft/"}]},{"title":"tinykv-project1-StandaloneKV","slug":"tinykv-project1-StandaloneKV","date":"2022-01-16T11:37:20.000Z","updated":"2022-01-17T07:13:44.400Z","comments":true,"path":"2022/01/16/tinykv-project1-StandaloneKV/","link":"","permalink":"http://example.com/2022/01/16/tinykv-project1-StandaloneKV/","excerpt":"tinykv project 1, 基于 badger 构造一个单机的支持列族存储的 gRPC 服务.","text":"tinykv project 1, 基于 badger 构造一个单机的支持列族存储的 gRPC 服务. 题目目标基于 badger 构造一个单机的支持列族存储的 gRPC 服务.这一服务提供四种基本操作: Put/Delete/Get/Scan. Put: 向指定列族中写入或修改. Get: 从指定列族中读取. Delete: 删除指定列族的指定值. Scan: 从指定列族中读取多个值. 要求实现的接口123456789101112type Storage interface &#123; Start() error Stop() error Write(ctx *kvrpcpb.Context, batch []Modify) error Reader(ctx *kvrpcpb.Context) (StorageReader, error)&#125;type StorageReader interface &#123; GetCF(cf string, key []byte) ([]byte, error) IterCf(cf string) engine_util.DBIterator Close()&#125; Storage 的 Write 方法接收一个 Context 指针 ctx 和一个 Modify 数组batch.Modify 是 interface{} 的一个简单封装, 而 Context 可暂时不管, 在后续项目中才会用到. 官方给的几个提示: Reader() 方法需要使用 badger.Txn, Reader close 时先将所有 iterator close, 再调用 txn.Discard(). Badger 不提供对列族的支持, engine_util package (kv/util/engine_util) 包通过向 key 添加前缀的方式支持列族. storage 有三个实现类: MemStorage, RaftStorage, StandAloneStorage. MemStorage:不需要 Start() 与 Stop(), 一个 llrb.LLRB 便是一个 CF, 只需要调用 llrb.LLRB 的 ReplaceOrInsert(item)、Delete(item)、Get(item) 等方法即可. RaftStorage:Start() 时根据 config 新建一些 client 与 worker 并启动, Stop() 时将它们停止.Write() 先将 batch 进行解析, 再调用 raftRouter.SendRaftCommand(request, cb) 将消息发向 raft 集群. StandAloneStorage:要求实现的部分, 类比 RaftStorage 即可. 其他在 macOS 上切换 go 版本用 1.17.5 版本的 go 运行 project 时会有奇怪的 errorfatal error: unexpected signal during runtime execution.看了一下 issues 应该是 go 版本的锅, 降级到 1.16.x 便可. 在 macOS 中可以使用 brew 方便地管理版本. 1234567# 安装 gobrew install go# 安装 go 1.16brew install go@1.16# 切换到 go 1.16brew unlink gobrew link go@1.16","categories":[{"name":"database project","slug":"database-project","permalink":"http://example.com/categories/database-project/"}],"tags":[{"name":"tinykv","slug":"tinykv","permalink":"http://example.com/tags/tinykv/"}]},{"title":"oceanbase-competition-final","slug":"oceanbase-competition-final","date":"2021-12-25T14:07:57.000Z","updated":"2022-01-06T13:18:59.119Z","comments":true,"path":"2021/12/25/oceanbase-competition-final/","link":"","permalink":"http://example.com/2021/12/25/oceanbase-competition-final/","excerpt":"","text":"doing","categories":[{"name":"paper","slug":"paper","permalink":"http://example.com/categories/paper/"}],"tags":[]},{"title":"15-445 BUFFER POOL","slug":"CMU-15-445-PROJECT-1-BUFFER-POOL","date":"2021-12-14T13:49:17.000Z","updated":"2021-12-14T14:10:22.955Z","comments":true,"path":"2021/12/14/CMU-15-445-PROJECT-1-BUFFER-POOL/","link":"","permalink":"http://example.com/2021/12/14/CMU-15-445-PROJECT-1-BUFFER-POOL/","excerpt":"","text":"","categories":[{"name":"database course","slug":"database-course","permalink":"http://example.com/categories/database-course/"}],"tags":[{"name":"cmu 15-445","slug":"cmu-15-445","permalink":"http://example.com/tags/cmu-15-445/"}]},{"title":"oceanBase 数据库大赛","slug":"oceanBase-数据库大赛","date":"2021-11-25T06:49:26.000Z","updated":"2022-01-06T07:15:16.780Z","comments":true,"path":"2021/11/25/oceanBase-数据库大赛/","link":"","permalink":"http://example.com/2021/11/25/oceanBase-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%A7%E8%B5%9B/","excerpt":"","text":"赛题描述在开源版本 OceanBase 的基础上, 针对 Nested Loop Join 场景做性能优化. 采用 sysbench 基准测试中 Throughput 的 events/s (eps) 这一项作为排名依据. 赛题解析什么是 Nested Loop Join?Nested Loop Join 是一种常见的数据库查询操作, 其中两个表的数据量相对较小, 且两个表的关联关系相对较简单.Nested Loop Join 的基本原理是每次从左表获取一行, 然后用这行数据和右表进行 Join. 与右表进行 Join 时, 可以通过索引查询降低复杂度. 表结构123456789101112131415local queryquery = string.format([[ CREATE TABLE t%d( c1 int primary key, c2 int, c3 int, v1 CHAR(60), v2 CHAR(60), v3 CHAR(60), v4 CHAR(60), v5 CHAR(60), v6 CHAR(60), v7 CHAR(60), v8 CHAR(60), v9 CHAR(60) )]], table_id)do_query(drv, con, &quot;create index t2_i1 on t2(c2) local&quot;)do_query(drv, con, &quot;create index t2_i2 on t2(c3) local&quot;)ival = sysbench.rand.default(1, sysbench.opt.table_size)left_min = ival - 100;left_max = ival + 100;cond = string.format(&quot;A.c1 &gt;= %d and A.c1 &lt; %d and A.c2 = B.c2 and A.c3 = B.c3&quot;, left_min, left_max)query = &quot;select /*+ordered use_nl(A,B)*/ * from t1 A, t2 B where &quot; .. cond 查询语句123456789101112131415161. 原始查询语句 select /*+ordered use_nl(A,B)*/ * from t1 A, t2 B where A.c1 &gt;= 100 and A.c1 &lt; 200 and A.c2 = B.c2 and A.c3 = B.c3; select /*+ordered use_nl(A,B)*/ * from t1 A, t2 B where A.c1 &gt;= 100 and A.c1 &lt; 200 and A.c2 = B.c2 and A.c3 = B.c3; explain select /*+ordered use_nl(A,B)*/ * from t1 A, t2 B where A.c1 &gt;= 100 and A.c1 &lt; 200 and A.c2 = B.c2 and A.c3 = B.c3;2. 当 A.c1 = A.c2 时, 改写后的查询语句 select /*+ordered use_nl(A,B)*/ * from t1 A, t2 B where A.c1 &gt;= 100 and A.c1 &lt; 200 and B.c2 &gt;= 100 and B.c2 &lt; 200 and A.c3 = B.c3; select /*+ordered use_nl(A,B)*/ * from t1 A, t2 B where A.c1 &gt;= 100 and A.c1 &lt; 200 and B.c2 &gt;= 100 and B.c2 &lt; 200 and A.c3 = B.c3; explain select /*+ordered use_nl(A,B)*/ * from t1 A, t2 B where A.c1 &gt;= 100 and A.c1 &lt; 200 and B.c2 &gt;= 100 and B.c2 &lt; 200 and A.c3 = B.c3;","categories":[{"name":"paper","slug":"paper","permalink":"http://example.com/categories/paper/"}],"tags":[]},{"title":"GFS 论文研读","slug":"GFS-论文研读","date":"2021-11-13T05:27:52.000Z","updated":"2022-01-17T15:59:25.181Z","comments":true,"path":"2021/11/13/GFS-论文研读/","link":"","permalink":"http://example.com/2021/11/13/GFS-%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/","excerpt":"","text":"","categories":[{"name":"paper","slug":"paper","permalink":"http://example.com/categories/paper/"}],"tags":[]}],"categories":[{"name":"database project","slug":"database-project","permalink":"http://example.com/categories/database-project/"},{"name":"paper","slug":"paper","permalink":"http://example.com/categories/paper/"},{"name":"database course","slug":"database-course","permalink":"http://example.com/categories/database-course/"}],"tags":[{"name":"tinykv","slug":"tinykv","permalink":"http://example.com/tags/tinykv/"},{"name":"Raft","slug":"Raft","permalink":"http://example.com/tags/Raft/"},{"name":"cmu 15-445","slug":"cmu-15-445","permalink":"http://example.com/tags/cmu-15-445/"}]}